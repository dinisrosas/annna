{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dinis/Desktop/dev/annna/components/PrimitivesDocsSearch.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { MagnifyingGlassIcon, Cross2Icon, ExclamationTriangleIcon, CaretRightIcon } from '@radix-ui/react-icons';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { Box, TextField, Panel, IconButton, Tooltip, Text, styled } from '@modulz/design-system';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { Slot } from '@radix-ui/react-slot';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nconst ALGOLIA_APP_ID = 'VXVOLU3YVQ';\nconst ALGOLIA_PUBLIC_API_KEY = '9d44395c1b7b172ac84b7e5ab80bf8c5';\nconst searchClient = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_PUBLIC_API_KEY);\nconst SUPPORTED_LEVELS = ['lvl0', 'lvl1', 'lvl2', 'lvl3', 'lvl4'];\nconst SLASH_COMMAND_MESSAGE = 'Press Slash to start searching';\nexport function PrimitivesDocsSearch(props) {\n  const {\n    variant = 'desktop',\n    onOpenChange,\n    onSelect\n  } = props;\n  const isMobile = variant === 'mobile';\n  const snippetLength = isMobile ? 7 : 15;\n  const hitsPerPage = isMobile ? 20 : 50;\n  const inputRef = React.useRef(null);\n  const formRef = React.useRef(null);\n  const panelRef = React.useRef(null);\n  const [searchState, setSearchState] = React.useState({\n    collections: [],\n    completion: null,\n    context: {},\n    isOpen: false,\n    query: '',\n    activeItemId: null,\n    status: 'idle'\n  });\n  const autocomplete = React.useMemo(() => createAutocomplete({\n    // Provide deterministic id to prevent client / server mismatch warning\n    id: 'radix-autocomplete',\n    // Always highlight the first result\n    defaultActiveItemId: 0,\n    placeholder: 'Search Radix Primitives',\n    openOnFocus: false,\n    debug: false,\n    shouldPanelOpen: ({\n      state\n    }) => Boolean(state.query),\n    onStateChange: ({\n      state\n    }) => {\n      setSearchState(state);\n      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(state.isOpen);\n    },\n    getSources: ({\n      query,\n      setStatus,\n      state\n    }) => {\n      if (!query) return [];\n      return searchClient.search([{\n        indexName: process.env.NEXT_PUBLIC_ALGOLIA_INDEX_NAME,\n        query,\n        params: {\n          hitsPerPage,\n          attributesToRetrieve: ['type', 'url', 'hierarchy.lvl0', 'hierarchy.lvl1', 'hierarchy.lvl2', 'hierarchy.lvl3', 'hierarchy.lvl4', 'content'],\n          attributesToSnippet: [`hierarchy.lvl0:${snippetLength}`, `hierarchy.lvl1:${snippetLength}`, `hierarchy.lvl2:${snippetLength}`, `hierarchy.lvl3:${snippetLength}`, `hierarchy.lvl4:${snippetLength}`, `content:${snippetLength}`],\n          snippetEllipsisText: '…',\n          highlightPreTag: '__aa-highlight__',\n          highlightPostTag: '__/aa-highlight__'\n        }\n      }]).catch(error => {\n        // The Algolia `RetryError` happens when all the servers have\n        // failed, meaning that there's no chance the response comes\n        // back. This is the right time to display an error.\n        // See https://github.com/algolia/algoliasearch-client-javascript/blob/2ffddf59bc765cd1b664ee0346b28f00229d6e12/packages/transporter/src/errors/createRetryError.ts#L5\n        if (error.name === 'RetryError') setStatus('error');\n        throw error;\n      }).then(({\n        results\n      }) => {\n        // make sure we scroll back up to the top when new results come in.\n        if (state.isOpen) panelRef.current.scrollTop = 0; // we only have 1 query, so we  grab the hits from the first result\n\n        const {\n          hits\n        } = results[0];\n        const sources = groupBy(hits, hit => hit.hierarchy.lvl0);\n        return Object.entries(sources).sort(sortSources).map(([lvl0, items]) => ({\n          onSelect: params => {\n            // dismiss keyboard on mobile\n            if (isMobile) inputRef.current.blur();\n            params.setIsOpen(false);\n            onSelect === null || onSelect === void 0 ? void 0 : onSelect(params);\n          },\n          sourceId: lvl0,\n          getItemUrl: ({\n            item\n          }) => item.url,\n          getItems: () => items\n        }));\n      });\n    }\n  }), []); // Reset autocomplete state when transitioning between mobile and desktop\n  // This avoids persisting global layout changes when switching\n\n  React.useEffect(() => {\n    // Match @bp2\n    const mediaQueryList = window.matchMedia('(min-width: 900px)');\n\n    const handleChange = () => {\n      formRef.current.reset();\n      autocomplete.setIsOpen(false);\n    };\n\n    mediaQueryList.addEventListener('change', handleChange);\n    return () => mediaQueryList.removeEventListener('change', handleChange);\n  }, [autocomplete.setIsOpen]); // slash command to focus search\n\n  React.useEffect(() => {\n    const handleKeydown = event => {\n      if (!isEditingContent(event) && event.key === '/') {\n        inputRef.current.focus();\n        event.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeydown);\n    return () => document.removeEventListener('keydown', handleKeydown);\n  }, []); // dismiss mobile keyboard when scrolling\n\n  React.useEffect(() => {\n    const onTouchMove = event => {\n      const input = inputRef.current;\n      if (input === document.activeElement && event.target !== input) input.blur();\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    return () => {\n      window.removeEventListener('touchmove', onTouchMove);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, autocomplete.getRootProps({})), {}, {\n    css: {\n      // for the panel to be positioned correctly without needing popper\n      position: 'relative',\n      '@bp2': {\n        mr: '$7'\n      },\n      '@media (min-width: 1130px)': {\n        mr: 0\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      css: isMobile ? {\n        position: 'sticky',\n        top: 0,\n        pt: '$5',\n        pb: '$2',\n        backgroundColor: '$loContrast'\n      } : {},\n      children: /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n        as: \"form\",\n        ref: formRef\n      }, autocomplete.getFormProps({\n        inputElement: inputRef.current\n      })), {}, {\n        css: {\n          position: 'relative',\n          // Allow immediate interaction with input controls when autcomplete is open\n          pointerEvents: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, autocomplete.getLabelProps({})), {}, {\n          as: \"label\",\n          css: {\n            position: 'absolute',\n            top: '$2',\n            left: 'calc($3 - 3px)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MagnifyingGlassIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(VisuallyHidden, {\n            children: [SLASH_COMMAND_MESSAGE, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n          ref: inputRef\n        }, autocomplete.getInputProps({\n          inputElement: inputRef.current\n        })), {}, {\n          size: \"2\",\n          css: {\n            px: '$6',\n            backgroundColor: '$gray3',\n            boxShadow: 'none',\n            // we need at least 16px to prevent iOS safari from zooming in when focusing the input\n            fontSize: isMobile ? 16 : undefined,\n            '&:focus': {\n              boxShadow: 'inset 0px 0px 0px 1px $colors$gray8, 0px 0px 0px 1px $colors$gray8'\n            },\n            '&[type=\"search\"]': {\n              /* clears the 'X' from Internet Explorer */\n              '&::-ms-clear, &::-ms-reveal': {\n                display: 'none',\n                width: 0,\n                height: 0\n              },\n\n              /* clears the 'X' from Chrome */\n              [`&::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration`]: {\n                display: 'none'\n              }\n            }\n          }\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), searchState.query ?\n        /*#__PURE__*/\n        // show the clear button when there's a query in the input\n        _jsxDEV(Box, {\n          css: {\n            position: 'absolute',\n            top: '$1',\n            right: '$1'\n          },\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            content: \"Clear\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              type: \"reset\",\n              children: /*#__PURE__*/_jsxDEV(Cross2Icon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this) :\n        /*#__PURE__*/\n        // show the slash command info when there's no query in the input\n        _jsxDEV(Box, {\n          css: {\n            position: 'absolute',\n            top: '$1',\n            right: '$1',\n            display: 'none',\n            '@bp1': {\n              display: 'block'\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            content: SLASH_COMMAND_MESSAGE,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              css: {\n                boxShadow: 'inset 0px 0px 0px 1px $colors$gray6',\n                color: '$gray11'\n              },\n              onClick: () => requestAnimationFrame(() => inputRef.current.focus()) // we can make it unreachable via keyboard as we have the same message for the SR label\n              ,\n              tabIndex: -1,\n              children: /*#__PURE__*/_jsxDEV(\"kbd\", {\n                \"aria-hidden\": true,\n                children: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), searchState.isOpen && /*#__PURE__*/_jsxDEV(RemoveScroll, {\n      as: Slot,\n      allowPinchZoom: true,\n      enabled: !isMobile,\n      children: /*#__PURE__*/_jsxDEV(DismissableLayer, {\n        asChild: true,\n        disableOutsidePointerEvents: !isMobile,\n        onPointerDownOutside: event => {\n          const target = event.target;\n          const isPointerDownInForm = formRef.current.contains(target);\n          if (!isMobile && !isPointerDownInForm) autocomplete.setIsOpen(false);\n        },\n        children: isMobile ? /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n          ref: panelRef\n        }, autocomplete.getPanelProps({})), {}, {\n          css: {\n            py: '$2',\n            // ensure padding when scrolling via keyboard\n            scrollPaddingTop: '$2',\n            scrollPaddingBottom: '$2'\n          },\n          children: /*#__PURE__*/_jsxDEV(SearchResults, {\n            searchState: searchState,\n            autocomplete: autocomplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Panel, _objectSpread(_objectSpread({\n          ref: panelRef\n        }, autocomplete.getPanelProps({})), {}, {\n          css: {\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            mt: '$1',\n            maxHeight: '80vh',\n            overflow: 'auto',\n            p: '$2',\n            // ensure padding when scrolling via keyboard\n            scrollPaddingTop: '$2',\n            scrollPaddingBottom: '$2'\n          },\n          children: /*#__PURE__*/_jsxDEV(SearchResults, {\n            searchState: searchState,\n            autocomplete: autocomplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\nconst SearchResults = /*#__PURE__*/React.memo(({\n  searchState,\n  autocomplete\n}) => {\n  const hasResults = searchState.collections.some(collection => collection.items.length > 0);\n\n  if (searchState.status === 'error') {\n    return /*#__PURE__*/_jsxDEV(ItemTitle, {\n      size: \"3\",\n      css: {\n        py: '$2'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        as: \"span\",\n        css: {\n          ml: 3,\n          mr: 'calc($2 - 3px)',\n          svg: {\n            display: 'inline-block',\n            mt: -1\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(ExclamationTriangleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Mark, {\n        children: \"Unable to fetch results.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), \" You might want to check your network connection.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this);\n  }\n\n  if (!hasResults) {\n    return /*#__PURE__*/_jsxDEV(ItemTitle, {\n      size: \"3\",\n      css: {\n        p: '$2'\n      },\n      children: [\"No results for \", /*#__PURE__*/_jsxDEV(Mark, {\n        children: [\"\\u201C\", searchState.query, \"\\u201D\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: searchState.collections.map((collection, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [index > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        as: \"hr\",\n        css: {\n          my: '$2',\n          border: 'none',\n          height: 1,\n          backgroundColor: '$mauve6'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: collection.items.length > 0 && /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n          as: \"ul\"\n        }, autocomplete.getListProps()), {}, {\n          css: {\n            listStyle: 'none',\n            m: 0,\n            p: 0,\n            li: {\n              borderRadius: '$1',\n              '&[aria-selected=\"true\"], &:active': {\n                backgroundColor: '$violet3'\n              }\n            }\n          },\n          children: collection.items.map(item => /*#__PURE__*/_jsxDEV(\"li\", _objectSpread(_objectSpread({}, autocomplete.getItemProps({\n            item,\n            source: collection.source\n          })), {}, {\n            children: /*#__PURE__*/_jsxDEV(ItemLink, {\n              item: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 23\n            }, this)\n          }), item.objectID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 21\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 13\n      }, this)]\n    }, collection.source.sourceId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}, function areEqual(_prevProps, nextProps) {\n  // We don't update the results when Autocomplete is loading or stalled to\n  // avoid UI flashes:\n  //  - Empty → Results\n  //  - NoResults → NoResults with another query\n  return nextProps.searchState.status === 'loading' || nextProps.searchState.status === 'stalled';\n});\n\nfunction ItemLink({\n  item\n}) {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    href: item.url,\n    as: \"a\",\n    css: {\n      display: 'block',\n      p: '$2',\n      textDecoration: 'none',\n      color: 'inherit'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ItemTitle, {\n      as: \"p\",\n      variant: \"violet\",\n      size: \"3\",\n      css: {\n        mb: '$1'\n      },\n      children: /*#__PURE__*/_jsxDEV(Highlight, {\n        hit: item,\n        attribute: item.type === 'content' ? 'content' : ['hierarchy', item.type]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VisuallyHidden, {\n      children: \"; \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ItemBreadcrumb, {\n      item: item,\n      levels: SUPPORTED_LEVELS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this);\n}\n\nconst ItemTitle = styled(Text, {\n  lineHeight: '17px',\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis'\n});\n\nfunction ItemBreadcrumb({\n  item,\n  levels\n}) {\n  const itemLevelIndex = item.type === 'content' ? levels.length - 1 : levels.indexOf(item.type);\n  const breadcrumbLevels = levels.slice(0, itemLevelIndex);\n  return /*#__PURE__*/_jsxDEV(Text, {\n    size: \"1\",\n    css: {\n      color: '$mauve11',\n      textTransform: 'lowercase',\n      lineHeight: '15px'\n    },\n    as: \"p\",\n    children: breadcrumbLevels.map((level, index) => {\n      const heading = item.hierarchy[level];\n      return heading ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [index > 0 ? /*#__PURE__*/_jsxDEV(Box, {\n          as: \"span\",\n          css: {\n            color: '$mauve8',\n            svg: {\n              display: 'inline-block'\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(CaretRightIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(VisuallyHidden, {\n            children: \", \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }, this) : null, /*#__PURE__*/_jsxDEV(Highlight, {\n          hit: item,\n          attribute: ['hierarchy', level]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this) : null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Highlight({\n  hit,\n  attribute\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: parseAlgoliaHitSnippet({\n      hit,\n      attribute\n    }).map(({\n      value,\n      isHighlighted\n    }, index) => isHighlighted ? /*#__PURE__*/_jsxDEV(Mark, {\n      children: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 25\n    }, this) : value)\n  }, void 0, false);\n}\n\nconst Mark = styled('mark', {\n  backgroundColor: 'transparent',\n  color: 'inherit',\n  fontWeight: '500'\n});\n\nfunction groupBy(values, predicate) {\n  return values.reduce((acc, item) => {\n    const key = predicate(item);\n    if (!acc.hasOwnProperty(key)) acc[key] = [];\n    acc[key].push(item);\n    return acc;\n  }, {});\n}\n\nconst SOURCES_ORDER = ['Overview', 'Components', 'Utilities'];\n\nfunction sortSources([lvl0_a], [lvl0_b]) {\n  return SOURCES_ORDER.indexOf(lvl0_b) < SOURCES_ORDER.indexOf(lvl0_a) ? 1 : -1;\n}\n\nfunction isEditingContent(event) {\n  const element = event.target;\n  const tagName = element.tagName;\n  return element.isContentEditable || ['INPUT', 'SELECT', 'TEXTAREA'].includes(tagName);\n}","map":{"version":3,"sources":["/Users/dinis/Desktop/dev/annna/components/PrimitivesDocsSearch.tsx"],"names":["React","MagnifyingGlassIcon","Cross2Icon","ExclamationTriangleIcon","CaretRightIcon","RemoveScroll","Box","TextField","Panel","IconButton","Tooltip","Text","styled","DismissableLayer","Slot","VisuallyHidden","ALGOLIA_APP_ID","ALGOLIA_PUBLIC_API_KEY","searchClient","algoliasearch","SUPPORTED_LEVELS","SLASH_COMMAND_MESSAGE","PrimitivesDocsSearch","props","variant","onOpenChange","onSelect","isMobile","snippetLength","hitsPerPage","inputRef","useRef","formRef","panelRef","searchState","setSearchState","useState","collections","completion","context","isOpen","query","activeItemId","status","autocomplete","useMemo","createAutocomplete","id","defaultActiveItemId","placeholder","openOnFocus","debug","shouldPanelOpen","state","Boolean","onStateChange","getSources","setStatus","search","indexName","process","env","NEXT_PUBLIC_ALGOLIA_INDEX_NAME","params","attributesToRetrieve","attributesToSnippet","snippetEllipsisText","highlightPreTag","highlightPostTag","catch","error","name","then","results","current","scrollTop","hits","sources","groupBy","hit","hierarchy","lvl0","Object","entries","sort","sortSources","map","items","blur","setIsOpen","sourceId","getItemUrl","item","url","getItems","useEffect","mediaQueryList","window","matchMedia","handleChange","reset","addEventListener","removeEventListener","handleKeydown","event","isEditingContent","key","focus","preventDefault","document","onTouchMove","input","activeElement","target","getRootProps","position","mr","top","pt","pb","backgroundColor","getFormProps","inputElement","pointerEvents","getLabelProps","left","getInputProps","px","boxShadow","fontSize","undefined","display","width","height","right","color","requestAnimationFrame","isPointerDownInForm","contains","getPanelProps","py","scrollPaddingTop","scrollPaddingBottom","mt","maxHeight","overflow","p","SearchResults","memo","hasResults","some","collection","length","ml","svg","index","my","border","getListProps","listStyle","m","li","borderRadius","getItemProps","source","objectID","areEqual","_prevProps","nextProps","ItemLink","textDecoration","mb","type","ItemTitle","lineHeight","whiteSpace","textOverflow","ItemBreadcrumb","levels","itemLevelIndex","indexOf","breadcrumbLevels","slice","textTransform","level","heading","Highlight","attribute","parseAlgoliaHitSnippet","value","isHighlighted","Mark","fontWeight","values","predicate","reduce","acc","hasOwnProperty","push","SOURCES_ORDER","lvl0_a","lvl0_b","element","tagName","isContentEditable","includes"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  MagnifyingGlassIcon,\n  Cross2Icon,\n  ExclamationTriangleIcon,\n  CaretRightIcon,\n} from '@radix-ui/react-icons';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { Box, TextField, Panel, IconButton, Tooltip, Text, styled } from '@modulz/design-system';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { Slot } from '@radix-ui/react-slot';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\n\nimport type {\n  AutocompleteState as InternalAutocompleteState,\n  AutocompleteApi as InternalAutocompleteApi,\n  AutocompleteSource as InternalAutocompleteSource,\n} from '@algolia/autocomplete-core';\nimport type { Hit } from '@algolia/client-search';\n\nconst ALGOLIA_APP_ID = 'VXVOLU3YVQ';\nconst ALGOLIA_PUBLIC_API_KEY = '9d44395c1b7b172ac84b7e5ab80bf8c5';\n\nconst searchClient = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_PUBLIC_API_KEY);\n\nconst SUPPORTED_LEVELS = ['lvl0', 'lvl1', 'lvl2', 'lvl3', 'lvl4'] as const;\ntype LevelContentType = typeof SUPPORTED_LEVELS[number];\ntype ContentType = LevelContentType | 'content';\ntype SearchItem = Hit<{\n  type: ContentType;\n  url: string;\n  hierarchy: {\n    lvl0: string;\n    lvl1: string;\n    lvl2: string | null;\n    lvl3: string | null;\n    lvl4: string | null;\n  };\n  content: string | null;\n}>;\ntype AutocompleteState = InternalAutocompleteState<SearchItem>;\ntype AutocompleteApi = InternalAutocompleteApi<\n  SearchItem,\n  React.BaseSyntheticEvent,\n  React.MouseEvent,\n  React.KeyboardEvent\n>;\ntype AutocompleteSource = InternalAutocompleteSource<SearchItem>;\n\nconst SLASH_COMMAND_MESSAGE = 'Press Slash to start searching';\n\ntype PrimitivesDocsSearchProps = {\n  variant?: 'mobile' | 'desktop';\n  onOpenChange?: (open: boolean) => void;\n  onSelect?: AutocompleteSource['onSelect'];\n};\n\nexport function PrimitivesDocsSearch(props: PrimitivesDocsSearchProps) {\n  const { variant = 'desktop', onOpenChange, onSelect } = props;\n  const isMobile = variant === 'mobile';\n  const snippetLength = isMobile ? 7 : 15;\n  const hitsPerPage = isMobile ? 20 : 50;\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const panelRef = React.useRef<HTMLDivElement>(null);\n\n  const [searchState, setSearchState] = React.useState<AutocompleteState>({\n    collections: [],\n    completion: null,\n    context: {},\n    isOpen: false,\n    query: '',\n    activeItemId: null,\n    status: 'idle',\n  });\n\n  const autocomplete = React.useMemo(\n    () =>\n      createAutocomplete<\n        SearchItem,\n        React.BaseSyntheticEvent,\n        React.MouseEvent,\n        React.KeyboardEvent\n      >({\n        // Provide deterministic id to prevent client / server mismatch warning\n        id: 'radix-autocomplete',\n        // Always highlight the first result\n        defaultActiveItemId: 0,\n        placeholder: 'Search Radix Primitives',\n        openOnFocus: false,\n        debug: false,\n        shouldPanelOpen: ({ state }) => Boolean(state.query),\n        onStateChange: ({ state }) => {\n          setSearchState(state);\n          onOpenChange?.(state.isOpen);\n        },\n        getSources: ({ query, setStatus, state }) => {\n          if (!query) return [];\n          return searchClient\n            .search<SearchItem>([\n              {\n                indexName: process.env.NEXT_PUBLIC_ALGOLIA_INDEX_NAME,\n                query,\n                params: {\n                  hitsPerPage,\n                  attributesToRetrieve: [\n                    'type',\n                    'url',\n                    'hierarchy.lvl0',\n                    'hierarchy.lvl1',\n                    'hierarchy.lvl2',\n                    'hierarchy.lvl3',\n                    'hierarchy.lvl4',\n                    'content',\n                  ],\n                  attributesToSnippet: [\n                    `hierarchy.lvl0:${snippetLength}`,\n                    `hierarchy.lvl1:${snippetLength}`,\n                    `hierarchy.lvl2:${snippetLength}`,\n                    `hierarchy.lvl3:${snippetLength}`,\n                    `hierarchy.lvl4:${snippetLength}`,\n                    `content:${snippetLength}`,\n                  ],\n                  snippetEllipsisText: '…',\n                  highlightPreTag: '__aa-highlight__',\n                  highlightPostTag: '__/aa-highlight__',\n                },\n              },\n            ])\n            .catch((error) => {\n              // The Algolia `RetryError` happens when all the servers have\n              // failed, meaning that there's no chance the response comes\n              // back. This is the right time to display an error.\n              // See https://github.com/algolia/algoliasearch-client-javascript/blob/2ffddf59bc765cd1b664ee0346b28f00229d6e12/packages/transporter/src/errors/createRetryError.ts#L5\n              if (error.name === 'RetryError') setStatus('error');\n              throw error;\n            })\n            .then(({ results }) => {\n              // make sure we scroll back up to the top when new results come in.\n              if (state.isOpen) panelRef.current.scrollTop = 0;\n\n              // we only have 1 query, so we  grab the hits from the first result\n              const { hits } = results[0];\n              const sources = groupBy(hits, (hit) => hit.hierarchy.lvl0);\n              return Object.entries(sources)\n                .sort(sortSources)\n                .map(([lvl0, items]) => ({\n                  onSelect: (params) => {\n                    // dismiss keyboard on mobile\n                    if (isMobile) inputRef.current.blur();\n                    params.setIsOpen(false);\n                    onSelect?.(params);\n                  },\n                  sourceId: lvl0,\n                  getItemUrl: ({ item }) => item.url,\n                  getItems: () => items,\n                }));\n            });\n        },\n      }),\n    []\n  );\n\n  // Reset autocomplete state when transitioning between mobile and desktop\n  // This avoids persisting global layout changes when switching\n  React.useEffect(() => {\n    // Match @bp2\n    const mediaQueryList = window.matchMedia('(min-width: 900px)');\n\n    const handleChange = () => {\n      formRef.current.reset();\n      autocomplete.setIsOpen(false);\n    };\n\n    mediaQueryList.addEventListener('change', handleChange);\n    return () => mediaQueryList.removeEventListener('change', handleChange);\n  }, [autocomplete.setIsOpen]);\n\n  // slash command to focus search\n  React.useEffect(() => {\n    const handleKeydown = (event: KeyboardEvent) => {\n      if (!isEditingContent(event) && event.key === '/') {\n        inputRef.current.focus();\n        event.preventDefault();\n      }\n    };\n    document.addEventListener('keydown', handleKeydown);\n    return () => document.removeEventListener('keydown', handleKeydown);\n  }, []);\n\n  // dismiss mobile keyboard when scrolling\n  React.useEffect(() => {\n    const onTouchMove = (event: TouchEvent) => {\n      const input = inputRef.current;\n      if (input === document.activeElement && event.target !== input) input.blur();\n    };\n    window.addEventListener('touchmove', onTouchMove);\n    return () => {\n      window.removeEventListener('touchmove', onTouchMove);\n    };\n  }, []);\n\n  return (\n    <Box\n      {...autocomplete.getRootProps({})}\n      css={{\n        // for the panel to be positioned correctly without needing popper\n        position: 'relative',\n\n        '@bp2': { mr: '$7' },\n        '@media (min-width: 1130px)': { mr: 0 },\n      }}\n    >\n      <Box\n        css={\n          isMobile\n            ? { position: 'sticky', top: 0, pt: '$5', pb: '$2', backgroundColor: '$loContrast' }\n            : {}\n        }\n      >\n        <Box\n          as=\"form\"\n          ref={formRef}\n          {...autocomplete.getFormProps({ inputElement: inputRef.current })}\n          css={{\n            position: 'relative',\n\n            // Allow immediate interaction with input controls when autcomplete is open\n            pointerEvents: 'auto',\n          }}\n        >\n          <Box\n            {...autocomplete.getLabelProps({})}\n            as=\"label\"\n            css={{ position: 'absolute', top: '$2', left: 'calc($3 - 3px)' }}\n          >\n            <MagnifyingGlassIcon />\n            <VisuallyHidden>{SLASH_COMMAND_MESSAGE}.</VisuallyHidden>\n          </Box>\n\n          <TextField\n            ref={inputRef}\n            {...autocomplete.getInputProps({ inputElement: inputRef.current })}\n            size=\"2\"\n            css={{\n              px: '$6',\n              backgroundColor: '$gray3',\n              boxShadow: 'none',\n              // we need at least 16px to prevent iOS safari from zooming in when focusing the input\n              fontSize: isMobile ? 16 : undefined,\n\n              '&:focus': {\n                boxShadow: 'inset 0px 0px 0px 1px $colors$gray8, 0px 0px 0px 1px $colors$gray8',\n              },\n\n              '&[type=\"search\"]': {\n                /* clears the 'X' from Internet Explorer */\n                '&::-ms-clear, &::-ms-reveal': { display: 'none', width: 0, height: 0 },\n\n                /* clears the 'X' from Chrome */\n                [`&::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration`]: {\n                  display: 'none',\n                },\n              },\n            }}\n          />\n\n          {searchState.query ? (\n            // show the clear button when there's a query in the input\n            <Box css={{ position: 'absolute', top: '$1', right: '$1' }}>\n              <Tooltip content=\"Clear\">\n                <IconButton type=\"reset\">\n                  <Cross2Icon />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          ) : (\n            // show the slash command info when there's no query in the input\n            <Box\n              css={{\n                position: 'absolute',\n                top: '$1',\n                right: '$1',\n                display: 'none',\n                '@bp1': { display: 'block' },\n              }}\n            >\n              <Tooltip content={SLASH_COMMAND_MESSAGE}>\n                <IconButton\n                  css={{ boxShadow: 'inset 0px 0px 0px 1px $colors$gray6', color: '$gray11' }}\n                  onClick={() => requestAnimationFrame(() => inputRef.current.focus())}\n                  // we can make it unreachable via keyboard as we have the same message for the SR label\n                  tabIndex={-1}\n                >\n                  <kbd aria-hidden>/</kbd>\n                </IconButton>\n              </Tooltip>\n            </Box>\n          )}\n        </Box>\n      </Box>\n\n      {searchState.isOpen && (\n        <RemoveScroll as={Slot} allowPinchZoom enabled={!isMobile}>\n          <DismissableLayer\n            asChild\n            disableOutsidePointerEvents={!isMobile}\n            onPointerDownOutside={(event) => {\n              const target = event.target as HTMLElement;\n              const isPointerDownInForm = formRef.current.contains(target);\n              if (!isMobile && !isPointerDownInForm) autocomplete.setIsOpen(false);\n            }}\n          >\n            {isMobile ? (\n              <Box\n                ref={panelRef}\n                {...autocomplete.getPanelProps({})}\n                css={{\n                  py: '$2',\n                  // ensure padding when scrolling via keyboard\n                  scrollPaddingTop: '$2',\n                  scrollPaddingBottom: '$2',\n                }}\n              >\n                <SearchResults searchState={searchState} autocomplete={autocomplete} />\n              </Box>\n            ) : (\n              <Panel\n                ref={panelRef}\n                {...autocomplete.getPanelProps({})}\n                css={{\n                  position: 'absolute',\n                  left: 0,\n                  right: 0,\n                  mt: '$1',\n                  maxHeight: '80vh',\n                  overflow: 'auto',\n                  p: '$2',\n\n                  // ensure padding when scrolling via keyboard\n                  scrollPaddingTop: '$2',\n                  scrollPaddingBottom: '$2',\n                }}\n              >\n                <SearchResults searchState={searchState} autocomplete={autocomplete} />\n              </Panel>\n            )}\n          </DismissableLayer>\n        </RemoveScroll>\n      )}\n    </Box>\n  );\n}\n\ntype SearchResultsProps = { searchState: AutocompleteState; autocomplete: AutocompleteApi };\nconst SearchResults = React.memo(\n  ({ searchState, autocomplete }: SearchResultsProps) => {\n    const hasResults = searchState.collections.some((collection) => collection.items.length > 0);\n\n    if (searchState.status === 'error') {\n      return (\n        <ItemTitle size=\"3\" css={{ py: '$2' }}>\n          <Box\n            as=\"span\"\n            css={{ ml: 3, mr: 'calc($2 - 3px)', svg: { display: 'inline-block', mt: -1 } }}\n          >\n            <ExclamationTriangleIcon />\n          </Box>\n          <Mark>Unable to fetch results.</Mark> You might want to check your network connection.\n        </ItemTitle>\n      );\n    }\n\n    if (!hasResults) {\n      return (\n        <ItemTitle size=\"3\" css={{ p: '$2' }}>\n          No results for <Mark>“{searchState.query}”</Mark>\n        </ItemTitle>\n      );\n    }\n\n    return (\n      <>\n        {searchState.collections.map((collection, index) => (\n          <React.Fragment key={collection.source.sourceId}>\n            {index > 0 && (\n              <Box\n                as=\"hr\"\n                css={{ my: '$2', border: 'none', height: 1, backgroundColor: '$mauve6' }}\n              />\n            )}\n\n            <section>\n              {collection.items.length > 0 && (\n                <Box\n                  as=\"ul\"\n                  {...autocomplete.getListProps()}\n                  css={{\n                    listStyle: 'none',\n                    m: 0,\n                    p: 0,\n                    li: {\n                      borderRadius: '$1',\n                      '&[aria-selected=\"true\"], &:active': { backgroundColor: '$violet3' },\n                    },\n                  }}\n                >\n                  {collection.items.map((item) => (\n                    <li\n                      key={item.objectID}\n                      {...autocomplete.getItemProps({ item, source: collection.source })}\n                    >\n                      <ItemLink item={item} />\n                    </li>\n                  ))}\n                </Box>\n              )}\n            </section>\n          </React.Fragment>\n        ))}\n      </>\n    );\n  },\n  function areEqual(_prevProps, nextProps) {\n    // We don't update the results when Autocomplete is loading or stalled to\n    // avoid UI flashes:\n    //  - Empty → Results\n    //  - NoResults → NoResults with another query\n    return nextProps.searchState.status === 'loading' || nextProps.searchState.status === 'stalled';\n  }\n);\n\nfunction ItemLink({ item }: { item: SearchItem }) {\n  return (\n    <Box\n      href={item.url}\n      as=\"a\"\n      css={{ display: 'block', p: '$2', textDecoration: 'none', color: 'inherit' }}\n    >\n      <ItemTitle as=\"p\" variant=\"violet\" size=\"3\" css={{ mb: '$1' }}>\n        <Highlight\n          hit={item}\n          attribute={item.type === 'content' ? 'content' : ['hierarchy', item.type]}\n        />\n      </ItemTitle>\n      {/* Adding a semi-colon to insert a break in the speech flow */}\n      <VisuallyHidden>; </VisuallyHidden>\n      <ItemBreadcrumb item={item} levels={SUPPORTED_LEVELS} />\n    </Box>\n  );\n}\n\nconst ItemTitle = styled(Text, {\n  lineHeight: '17px',\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n});\n\nfunction ItemBreadcrumb({ item, levels }: { item: SearchItem; levels: typeof SUPPORTED_LEVELS }) {\n  const itemLevelIndex = item.type === 'content' ? levels.length - 1 : levels.indexOf(item.type);\n  const breadcrumbLevels = levels.slice(0, itemLevelIndex);\n\n  return (\n    <Text\n      size=\"1\"\n      css={{ color: '$mauve11', textTransform: 'lowercase', lineHeight: '15px' }}\n      as=\"p\"\n    >\n      {breadcrumbLevels.map((level, index) => {\n        const heading = item.hierarchy[level];\n        return heading ? (\n          <React.Fragment key={index}>\n            {index > 0 ? (\n              <Box as=\"span\" css={{ color: '$mauve8', svg: { display: 'inline-block' } }}>\n                <CaretRightIcon />\n                {/* Adding a comma to insert a natural break in the speech flow */}\n                <VisuallyHidden>, </VisuallyHidden>\n              </Box>\n            ) : null}\n            <Highlight hit={item} attribute={['hierarchy', level]} />\n          </React.Fragment>\n        ) : null;\n      })}\n    </Text>\n  );\n}\n\nfunction Highlight<THit>({ hit, attribute }: { hit: THit; attribute: keyof THit | string[] }) {\n  return (\n    <>\n      {parseAlgoliaHitSnippet<THit>({ hit, attribute }).map(({ value, isHighlighted }, index) =>\n        isHighlighted ? <Mark key={index}>{value}</Mark> : value\n      )}\n    </>\n  );\n}\n\nconst Mark = styled('mark', {\n  backgroundColor: 'transparent',\n  color: 'inherit',\n  fontWeight: '500',\n});\n\nfunction groupBy<TValue extends Record<string, unknown>>(\n  values: TValue[],\n  predicate: (value: TValue) => string\n): Record<string, TValue[]> {\n  return values.reduce<Record<string, TValue[]>>((acc, item) => {\n    const key = predicate(item);\n    if (!acc.hasOwnProperty(key)) acc[key] = [];\n    acc[key].push(item);\n    return acc;\n  }, {});\n}\n\nconst SOURCES_ORDER = ['Overview', 'Components', 'Utilities'];\ntype SourceEntry = [string, SearchItem[]];\nfunction sortSources([lvl0_a]: SourceEntry, [lvl0_b]: SourceEntry) {\n  return SOURCES_ORDER.indexOf(lvl0_b) < SOURCES_ORDER.indexOf(lvl0_a) ? 1 : -1;\n}\n\nfunction isEditingContent(event: KeyboardEvent) {\n  const element = event.target as HTMLElement;\n  const tagName = element.tagName;\n  return element.isContentEditable || ['INPUT', 'SELECT', 'TEXTAREA'].includes(tagName);\n}\n"]},"metadata":{},"sourceType":"module"}