{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dinis/Desktop/dev/annna/components/marketing/Carousel.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Box } from '@modulz/design-system';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport debounce from 'lodash.debounce';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport smoothscroll from 'smoothscroll-polyfill';\nconst [CarouselProvider, useCarouselContext] = createContext('Carousel');\nexport const Carousel = props => {\n  const ref = useRef(null);\n\n  const {\n    children\n  } = props,\n        carouselProps = _objectWithoutProperties(props, [\"children\"]);\n\n  const slideListRef = useRef(null);\n  const {\n    0: _,\n    1: force\n  } = useState({});\n  const {\n    0: nextDisabled,\n    1: setNextDisabled\n  } = useState(false);\n  const {\n    0: prevDisabled,\n    1: setPrevDisabled\n  } = useState(true);\n  const timeoutRef = useRef();\n  const navigationUpdateDelay = useRef(100);\n  useEffect(() => smoothscroll.polyfill(), []);\n  const getSlideInDirection = useCallbackRef(direction => {\n    var _ref$current;\n\n    const slides = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll('[data-slide-intersection-ratio]');\n\n    if (slides) {\n      const slidesArray = Array.from(slides.values());\n\n      if (direction === 1) {\n        slidesArray.reverse();\n      }\n\n      return slidesArray.find(slide => slide.dataset.slideIntersectionRatio !== '0');\n    }\n  });\n  const handleNextClick = useCallback(() => {\n    const nextSlide = getSlideInDirection(1);\n\n    if (nextSlide) {\n      const {\n        scrollLeft,\n        scrollWidth,\n        clientWidth\n      } = slideListRef.current;\n      const itemWidth = nextSlide.clientWidth;\n      const itemsToScroll = itemWidth * 2.5 < document.documentElement.offsetWidth ? 2 : 1;\n      const nextPos = Math.floor(scrollLeft / itemWidth) * itemWidth + itemWidth * itemsToScroll;\n      slideListRef.current.scrollTo({\n        left: nextPos,\n        behavior: 'smooth'\n      }); // Disable previous & next buttons immediately\n\n      setPrevDisabled(nextPos <= 0);\n      setNextDisabled(scrollWidth - nextPos - clientWidth <= 0); // Wait for scroll animation to finish before the buttons *might* show up again\n\n      navigationUpdateDelay.current = 500;\n    }\n  }, [getSlideInDirection, setPrevDisabled]);\n  const handlePrevClick = useCallback(() => {\n    const prevSlide = getSlideInDirection(-1);\n\n    if (prevSlide) {\n      const {\n        scrollLeft,\n        scrollWidth,\n        clientWidth\n      } = slideListRef.current;\n      const itemWidth = prevSlide.clientWidth;\n      const itemsToScroll = itemWidth * 2.5 < document.documentElement.offsetWidth ? 2 : 1;\n      const nextPos = Math.ceil(scrollLeft / itemWidth) * itemWidth - itemWidth * itemsToScroll;\n      slideListRef.current.scrollTo({\n        left: nextPos,\n        behavior: 'smooth'\n      }); // Disable previous & next buttons immediately\n\n      setPrevDisabled(nextPos <= 0);\n      setNextDisabled(scrollWidth - nextPos - clientWidth <= 0); // Wait for scroll animation to finish before the buttons *might* show up again\n\n      navigationUpdateDelay.current = 500;\n    }\n  }, [getSlideInDirection, setPrevDisabled]);\n  useEffect(() => {\n    // Keep checking for whether we need to disable the navigation buttons, debounced\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      requestAnimationFrame(() => {\n        if (slideListRef.current) {\n          const {\n            scrollLeft,\n            scrollWidth,\n            clientWidth\n          } = slideListRef.current;\n          setPrevDisabled(scrollLeft <= 0);\n          setNextDisabled(scrollWidth - scrollLeft - clientWidth <= 0);\n          navigationUpdateDelay.current = 100;\n        }\n      });\n    }, navigationUpdateDelay.current);\n  });\n  useEffect(() => {\n    const slidesList = slideListRef.current;\n\n    if (slidesList) {\n      const handleScrollStartAndEnd = debounce(() => force({}), 100, {\n        leading: true,\n        trailing: true\n      });\n      slidesList.addEventListener('scroll', handleScrollStartAndEnd);\n      window.addEventListener('resize', handleScrollStartAndEnd);\n      force({});\n      return () => {\n        slidesList.removeEventListener('scroll', handleScrollStartAndEnd);\n        window.removeEventListener('resize', handleScrollStartAndEnd);\n      };\n    }\n  }, [slideListRef]);\n  return /*#__PURE__*/_jsxDEV(CarouselProvider, {\n    _: _,\n    nextDisabled: nextDisabled,\n    prevDisabled: prevDisabled,\n    slideListRef: slideListRef,\n    onNextClick: handleNextClick,\n    onPrevClick: handlePrevClick,\n    children: /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, carouselProps), {}, {\n      ref: ref,\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\nexport const CarouselSlideList = props => {\n  const context = useCarouselContext('CarouselSlideList');\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(ref, context.slideListRef);\n  const [dragStart, setDragStart] = React.useState(null);\n  const handleMouseMove = useCallbackRef(event => {\n    if (ref.current) {\n      const distanceX = event.clientX - dragStart.pointerX;\n      ref.current.scrollLeft = dragStart.scrollX - distanceX;\n    }\n  });\n  const handleMouseUp = useCallbackRef(() => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n    setDragStart(null);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, props), {}, {\n    ref: composedRefs,\n    \"data-state\": dragStart ? 'dragging' : undefined,\n    onMouseDownCapture: composeEventHandlers(props.onMouseDownCapture, event => {\n      // Drag only if main mouse button was clicked\n      if (event.button === 0) {\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n        setDragStart({\n          scrollX: event.currentTarget.scrollLeft,\n          pointerX: event.clientX\n        });\n      }\n    }),\n    onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n      const element = event.target;\n      element.style.userSelect = 'none';\n      element.setPointerCapture(event.pointerId);\n    }),\n    onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n      const element = event.target;\n      element.style.userSelect = '';\n      element.releasePointerCapture(event.pointerId);\n    })\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\nexport const CarouselSlide = props => {\n  const {\n    as: Comp = Box\n  } = props,\n        slideProps = _objectWithoutProperties(props, [\"as\"]);\n\n  const context = useCarouselContext('CarouselSlide');\n  const ref = useRef(null);\n  const {\n    0: intersectionRatio,\n    1: setIntersectionRatio\n  } = useState(0);\n  const isDraggingRef = useRef(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => setIntersectionRatio(entry.intersectionRatio), {\n      root: context.slideListRef.current,\n      threshold: [0, 0.5, 1]\n    });\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [context.slideListRef]);\n  return /*#__PURE__*/_jsxDEV(Comp, _objectSpread(_objectSpread({}, slideProps), {}, {\n    ref: ref,\n    \"data-slide-intersection-ratio\": intersectionRatio,\n    onDragStart: event => {\n      event.preventDefault();\n      isDraggingRef.current = true;\n    },\n    onClick: event => {\n      if (isDraggingRef.current) {\n        event.preventDefault();\n      }\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\nexport const CarouselNext = props => {\n  const {\n    as: Comp = 'button'\n  } = props,\n        nextProps = _objectWithoutProperties(props, [\"as\"]);\n\n  const context = useCarouselContext('CarouselNext');\n  return /*#__PURE__*/_jsxDEV(Comp, _objectSpread(_objectSpread({}, nextProps), {}, {\n    onClick: () => context.onNextClick(),\n    disabled: context.nextDisabled\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\nexport const CarouselPrevious = props => {\n  const {\n    as: Comp = 'button'\n  } = props,\n        prevProps = _objectWithoutProperties(props, [\"as\"]);\n\n  const context = useCarouselContext('CarouselPrevious');\n  return /*#__PURE__*/_jsxDEV(Comp, _objectSpread(_objectSpread({}, prevProps), {}, {\n    onClick: () => context.onPrevClick(),\n    disabled: context.prevDisabled\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/dinis/Desktop/dev/annna/components/marketing/Carousel.tsx"],"names":["React","Box","useComposedRefs","createContext","useCallbackRef","composeEventHandlers","debounce","useCallback","useEffect","useRef","useState","smoothscroll","CarouselProvider","useCarouselContext","Carousel","props","ref","children","carouselProps","slideListRef","_","force","nextDisabled","setNextDisabled","prevDisabled","setPrevDisabled","timeoutRef","navigationUpdateDelay","polyfill","getSlideInDirection","direction","slides","current","querySelectorAll","slidesArray","Array","from","values","reverse","find","slide","dataset","slideIntersectionRatio","handleNextClick","nextSlide","scrollLeft","scrollWidth","clientWidth","itemWidth","itemsToScroll","document","documentElement","offsetWidth","nextPos","Math","floor","scrollTo","left","behavior","handlePrevClick","prevSlide","ceil","clearTimeout","setTimeout","requestAnimationFrame","slidesList","handleScrollStartAndEnd","leading","trailing","addEventListener","window","removeEventListener","CarouselSlideList","context","composedRefs","dragStart","setDragStart","handleMouseMove","event","distanceX","clientX","pointerX","scrollX","handleMouseUp","undefined","onMouseDownCapture","button","currentTarget","onPointerDown","element","target","style","userSelect","setPointerCapture","pointerId","onPointerUp","releasePointerCapture","CarouselSlide","as","Comp","slideProps","intersectionRatio","setIntersectionRatio","isDraggingRef","observer","IntersectionObserver","entry","root","threshold","observe","disconnect","preventDefault","CarouselNext","nextProps","onNextClick","CarouselPrevious","prevProps","onPrevClick"],"mappings":"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","sourcesContent":["import React, { ReactType } from 'react';\nimport { Box } from '@modulz/design-system';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport debounce from 'lodash.debounce';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport smoothscroll from 'smoothscroll-polyfill';\n\nconst [CarouselProvider, useCarouselContext] = createContext<{\n  _: any;\n  slideListRef: React.RefObject<HTMLElement>;\n  onNextClick(): void;\n  onPrevClick(): void;\n  nextDisabled: boolean;\n  prevDisabled: boolean;\n}>('Carousel');\n\nexport const Carousel = (props) => {\n  const ref = useRef<React.ElementRef<typeof Box>>(null);\n  const { children, ...carouselProps } = props;\n  const slideListRef = useRef<HTMLElement>(null);\n  const [_, force] = useState({});\n  const [nextDisabled, setNextDisabled] = useState(false);\n  const [prevDisabled, setPrevDisabled] = useState(true);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const navigationUpdateDelay = useRef(100);\n  useEffect(() => smoothscroll.polyfill(), []);\n\n  const getSlideInDirection = useCallbackRef((direction: 1 | -1) => {\n    const slides = ref.current?.querySelectorAll<HTMLElement>('[data-slide-intersection-ratio]');\n    if (slides) {\n      const slidesArray = Array.from(slides.values());\n\n      if (direction === 1) {\n        slidesArray.reverse();\n      }\n\n      return slidesArray.find((slide) => slide.dataset.slideIntersectionRatio !== '0');\n    }\n  });\n\n  const handleNextClick = useCallback(() => {\n    const nextSlide = getSlideInDirection(1);\n\n    if (nextSlide) {\n      const { scrollLeft, scrollWidth, clientWidth } = slideListRef.current;\n      const itemWidth = nextSlide.clientWidth;\n      const itemsToScroll = itemWidth * 2.5 < document.documentElement.offsetWidth ? 2 : 1;\n      const nextPos = Math.floor(scrollLeft / itemWidth) * itemWidth + itemWidth * itemsToScroll;\n      slideListRef.current.scrollTo({ left: nextPos, behavior: 'smooth' });\n\n      // Disable previous & next buttons immediately\n      setPrevDisabled(nextPos <= 0);\n      setNextDisabled(scrollWidth - nextPos - clientWidth <= 0);\n      // Wait for scroll animation to finish before the buttons *might* show up again\n      navigationUpdateDelay.current = 500;\n    }\n  }, [getSlideInDirection, setPrevDisabled]);\n\n  const handlePrevClick = useCallback(() => {\n    const prevSlide = getSlideInDirection(-1);\n    if (prevSlide) {\n      const { scrollLeft, scrollWidth, clientWidth } = slideListRef.current;\n      const itemWidth = prevSlide.clientWidth;\n      const itemsToScroll = itemWidth * 2.5 < document.documentElement.offsetWidth ? 2 : 1;\n      const nextPos = Math.ceil(scrollLeft / itemWidth) * itemWidth - itemWidth * itemsToScroll;\n      slideListRef.current.scrollTo({ left: nextPos, behavior: 'smooth' });\n\n      // Disable previous & next buttons immediately\n      setPrevDisabled(nextPos <= 0);\n      setNextDisabled(scrollWidth - nextPos - clientWidth <= 0);\n      // Wait for scroll animation to finish before the buttons *might* show up again\n      navigationUpdateDelay.current = 500;\n    }\n  }, [getSlideInDirection, setPrevDisabled]);\n\n  useEffect(() => {\n    // Keep checking for whether we need to disable the navigation buttons, debounced\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => {\n      requestAnimationFrame(() => {\n        if (slideListRef.current) {\n          const { scrollLeft, scrollWidth, clientWidth } = slideListRef.current;\n          setPrevDisabled(scrollLeft <= 0);\n          setNextDisabled(scrollWidth - scrollLeft - clientWidth <= 0);\n          navigationUpdateDelay.current = 100;\n        }\n      });\n    }, navigationUpdateDelay.current);\n  });\n\n  useEffect(() => {\n    const slidesList = slideListRef.current;\n    if (slidesList) {\n      const handleScrollStartAndEnd = debounce(() => force({}), 100, {\n        leading: true,\n        trailing: true,\n      });\n      slidesList.addEventListener('scroll', handleScrollStartAndEnd);\n      window.addEventListener('resize', handleScrollStartAndEnd);\n      force({});\n      return () => {\n        slidesList.removeEventListener('scroll', handleScrollStartAndEnd);\n        window.removeEventListener('resize', handleScrollStartAndEnd);\n      };\n    }\n  }, [slideListRef]);\n\n  return (\n    <CarouselProvider\n      _={_}\n      nextDisabled={nextDisabled}\n      prevDisabled={prevDisabled}\n      slideListRef={slideListRef}\n      onNextClick={handleNextClick}\n      onPrevClick={handlePrevClick}\n    >\n      <Box {...carouselProps} ref={ref}>\n        {children}\n      </Box>\n    </CarouselProvider>\n  );\n};\n\nexport const CarouselSlideList = (props) => {\n  const context = useCarouselContext('CarouselSlideList');\n  const ref = React.useRef<React.ElementRef<typeof Box>>(null);\n  const composedRefs = useComposedRefs(ref, context.slideListRef);\n  const [dragStart, setDragStart] = React.useState(null);\n\n  const handleMouseMove = useCallbackRef((event) => {\n    if (ref.current) {\n      const distanceX = event.clientX - dragStart.pointerX;\n      ref.current.scrollLeft = dragStart.scrollX - distanceX;\n    }\n  });\n\n  const handleMouseUp = useCallbackRef(() => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n    setDragStart(null);\n  });\n\n  return (\n    <Box\n      {...props}\n      ref={composedRefs}\n      data-state={dragStart ? 'dragging' : undefined}\n      onMouseDownCapture={composeEventHandlers(props.onMouseDownCapture, (event: MouseEvent) => {\n        // Drag only if main mouse button was clicked\n        if (event.button === 0) {\n          document.addEventListener('mousemove', handleMouseMove);\n          document.addEventListener('mouseup', handleMouseUp);\n          setDragStart({\n            scrollX: (event.currentTarget as HTMLElement).scrollLeft,\n            pointerX: event.clientX,\n          });\n        }\n      })}\n      onPointerDown={composeEventHandlers(props.onPointerDown, (event: PointerEvent) => {\n        const element = event.target as HTMLElement;\n        element.style.userSelect = 'none';\n        element.setPointerCapture(event.pointerId);\n      })}\n      onPointerUp={composeEventHandlers(props.onPointerUp, (event: PointerEvent) => {\n        const element = event.target as HTMLElement;\n        element.style.userSelect = '';\n        element.releasePointerCapture(event.pointerId);\n      })}\n    />\n  );\n};\n\nexport const CarouselSlide = (props) => {\n  const { as: Comp = Box, ...slideProps } = props;\n  const context = useCarouselContext('CarouselSlide');\n  const ref = useRef<React.ElementRef<typeof Box>>(null);\n  const [intersectionRatio, setIntersectionRatio] = useState(0);\n  const isDraggingRef = useRef(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => setIntersectionRatio(entry.intersectionRatio),\n      { root: context.slideListRef.current, threshold: [0, 0.5, 1] }\n    );\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [context.slideListRef]);\n\n  return (\n    <Comp\n      {...slideProps}\n      ref={ref}\n      data-slide-intersection-ratio={intersectionRatio}\n      onDragStart={(event) => {\n        event.preventDefault();\n        isDraggingRef.current = true;\n      }}\n      onClick={(event) => {\n        if (isDraggingRef.current) {\n          event.preventDefault();\n        }\n      }}\n    />\n  );\n};\n\nexport const CarouselNext = (props) => {\n  const { as: Comp = 'button', ...nextProps } = props;\n  const context = useCarouselContext('CarouselNext');\n  return (\n    <Comp {...nextProps} onClick={() => context.onNextClick()} disabled={context.nextDisabled} />\n  );\n};\n\nexport const CarouselPrevious = (props) => {\n  const { as: Comp = 'button', ...prevProps } = props;\n  const context = useCarouselContext('CarouselPrevious');\n  return (\n    <Comp {...prevProps} onClick={() => context.onPrevClick()} disabled={context.prevDisabled} />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}