{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dinis/Desktop/dev/annna/components/ScrollArea.tsx\";\nimport React from 'react';\nimport { Flex, Box } from '@modulz/design-system';\n\nfunction canUseDOM() {\n  return !!(false && window.document && window.document.createElement);\n}\n\nconst useIsomorphicLayoutEffect = canUseDOM() ? React.useLayoutEffect : React.useEffect;\nexport const ScrollArea = props => {\n  const thumbRef = React.useRef(null);\n  const wrapperRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const frameUpdateRef = React.useRef(0);\n  const lastDragPos = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originalBodyPointerEvents = React.useRef(typeof document === 'undefined' ? '' : document.body.style.pointerEvents);\n  useIsomorphicLayoutEffect(() => {\n    var _thumbRef$current;\n\n    const wrapperEl = wrapperRef.current;\n    const contentEl = contentRef.current;\n    const thumbEl = thumbRef.current;\n    /** The total height of the scrollable content */\n\n    let totalHeight = 0;\n    /** The visible height of the scrollable content */\n\n    let visibleHeight = 0;\n    /** The current scrollTop */\n\n    let scrollPos = 0;\n    /** How far we've scrolled on a scale of 0 to 1 */\n\n    let scrollPosRatio = 0;\n    /** The ratio of scroll of visible area to total area on a scale of 0 to 1: */\n\n    let visibleToTotalRatio = 0;\n    /** Keeps the thumb the right size and in the right position */\n\n    function updateThumb() {\n      if (contentEl && thumbEl && wrapperEl) {\n        // Update our cached values:\n        totalHeight = contentEl.scrollHeight;\n        visibleHeight = contentEl.clientHeight;\n        scrollPos = contentEl.scrollTop; // Update calculated values:\n\n        scrollPosRatio = scrollPos / totalHeight;\n        visibleToTotalRatio = visibleHeight / totalHeight;\n\n        if (visibleToTotalRatio >= 1) {\n          // We're at 100% visible area, no need to show the scroll thumb:\n          thumbEl.style.height = '0px';\n        } else {\n          // Set the thumb top to the scroll percent:\n          thumbEl.style.top = scrollPosRatio * 100 + '%'; // Set the thumb size based on the scroll ratio:\n\n          thumbEl.style.height = Math.max(visibleToTotalRatio * 100, 10) + '%';\n        }\n      } // Keep the updates coming:\n\n\n      frameUpdateRef.current = requestAnimationFrame(updateThumb);\n    }\n    /** Caches a starting mouse position, wires up listeners for drag */\n\n\n    function onDragStart(e) {\n      if (contentEl && thumbEl && wrapperEl) {\n        // Prevent default text selection\n        e.preventDefault(); // Grab the starting mouse pos:\n\n        lastDragPos.current = {\n          x: e.clientX,\n          y: e.clientY\n        }; // Add the dragging class to keep the thumb visible\n\n        wrapperEl.classList.add('workos-is-dragging'); // Add event listeners for drag and end:\n\n        window.addEventListener('mousemove', onDragMove);\n        window.addEventListener('mouseup', onDragEnd); // Remember current body style so overrides can be restored later\n\n        originalBodyPointerEvents.current = document.body.style.pointerEvents; // Disable pointer events so element hovers aren't visible while dragging\n\n        document.body.style.pointerEvents = 'none';\n      }\n    }\n    /** Calculates the mouse move to scroll amount and applies it */\n\n\n    function onDragMove(e) {\n      if (contentEl && thumbEl && wrapperEl) {\n        // How much did we move?\n        const delta = {\n          dx: lastDragPos.current.x - e.clientX,\n          dy: lastDragPos.current.y - e.clientY\n        }; // Cache the new mouse position:\n\n        lastDragPos.current = {\n          x: e.clientX,\n          y: e.clientY\n        }; // Update the scroll position of the content, amplifying the mouse movement by the amount of content hidden:\n\n        contentEl.scrollTop -= Math.round(delta.dy / visibleToTotalRatio);\n      }\n    }\n    /** Unwires the mouse listeners and pops the dragging class off the wrapper */\n\n\n    function onDragEnd(e) {\n      if (contentEl && thumbEl && wrapperEl) {\n        // Add the dragging class to keep the thumb visible\n        wrapperEl.classList.remove('workos-is-dragging'); // Get rid of our drag move and end event listeners:\n\n        window.removeEventListener('mousemove', onDragMove);\n        window.removeEventListener('mouseup', onDragEnd); // Restore body pointer events style\n\n        document.body.style.pointerEvents = originalBodyPointerEvents.current;\n      }\n    } // Listen for mousedown on the thumb:\n\n\n    (_thumbRef$current = thumbRef.current) === null || _thumbRef$current === void 0 ? void 0 : _thumbRef$current.addEventListener('mousedown', onDragStart); // Start updates every frame:\n\n    frameUpdateRef.current = requestAnimationFrame(updateThumb); // Cancel the requestAnimationFrame and unbind potential listeners before leaving\n\n    return () => {\n      cancelAnimationFrame(frameUpdateRef.current);\n      thumbEl === null || thumbEl === void 0 ? void 0 : thumbEl.removeEventListener('mousedown', onDragStart);\n      window.removeEventListener('mousemove', onDragMove);\n      window.removeEventListener('mouseup', onDragEnd);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    ref: wrapperRef,\n    css: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      minHeight: 0,\n      maxHeight: '100%',\n      position: 'relative',\n      // This bit shows the thumb when you hover the wrapper\n      '&:hover': {\n        '& [data-scroll-thumb]': {\n          opacity: 1\n        }\n      },\n      '&.workos-is-dragging': {\n        // Need to keep pointer events when scrolling so thumb isn't hidden immediately after scroll\n        pointerEvents: 'auto',\n        // But still remove pointer events from content\n        '& [data-scroll-content]': {\n          pointerEvents: 'none'\n        },\n        // Need to always keep the thumb visible when scrolling, even if the mouse leaves the wrapper\n        '& [data-scroll-thumb]': {\n          opacity: 1\n        }\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      \"data-scroll-content\": true,\n      ref: contentRef,\n      css: {\n        position: 'relative',\n        overflow: 'scroll',\n        scrollbarWidth: 'none',\n        zIndex: 1,\n        WebkitOverflowScrolling: 'touch',\n        '&::-webkit-scrollbar': {\n          display: 'none'\n        }\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: thumbRef,\n      \"data-scroll-thumb\": true,\n      css: {\n        opacity: 0,\n        zIndex: 2,\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        width: '8px',\n        // Fill in the thumb color\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: '2px',\n          left: '2px',\n          width: 'calc(100% - 4px)',\n          height: 'calc(100% - 4px)',\n          // Match Radix hue on grays\n          backgroundColor: 'hsla(212, 5%, 50%, 0.3)',\n          borderRadius: '9999px'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/dinis/Desktop/dev/annna/components/ScrollArea.tsx"],"names":["React","Flex","Box","canUseDOM","window","document","createElement","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","ScrollArea","props","thumbRef","useRef","wrapperRef","contentRef","frameUpdateRef","lastDragPos","x","y","originalBodyPointerEvents","body","style","pointerEvents","wrapperEl","current","contentEl","thumbEl","totalHeight","visibleHeight","scrollPos","scrollPosRatio","visibleToTotalRatio","updateThumb","scrollHeight","clientHeight","scrollTop","height","top","Math","max","requestAnimationFrame","onDragStart","e","preventDefault","clientX","clientY","classList","add","addEventListener","onDragMove","onDragEnd","delta","dx","dy","round","remove","removeEventListener","cancelAnimationFrame","display","flex","flexDirection","minHeight","maxHeight","position","opacity","overflow","scrollbarWidth","zIndex","WebkitOverflowScrolling","children","right","width","content","left","backgroundColor","borderRadius"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Flex, Box } from '@modulz/design-system';\n\nfunction canUseDOM() {\n  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}\n\nconst useIsomorphicLayoutEffect = canUseDOM() ? React.useLayoutEffect : React.useEffect;\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype Vector = {\n  dx: number;\n  dy: number;\n};\n\ntype ScrollAreaProps = {\n  children: any;\n};\n\nexport const ScrollArea = (props: ScrollAreaProps) => {\n  const thumbRef = React.useRef<HTMLDivElement>(null);\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const frameUpdateRef = React.useRef<number>(0);\n  const lastDragPos = React.useRef<Point>({ x: 0, y: 0 });\n  const originalBodyPointerEvents = React.useRef(\n    typeof document === 'undefined' ? '' : document.body.style.pointerEvents\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    const wrapperEl = wrapperRef.current;\n    const contentEl = contentRef.current;\n    const thumbEl = thumbRef.current;\n\n    /** The total height of the scrollable content */\n    let totalHeight = 0;\n    /** The visible height of the scrollable content */\n    let visibleHeight = 0;\n    /** The current scrollTop */\n    let scrollPos = 0;\n    /** How far we've scrolled on a scale of 0 to 1 */\n    let scrollPosRatio = 0;\n    /** The ratio of scroll of visible area to total area on a scale of 0 to 1: */\n    let visibleToTotalRatio = 0;\n\n    /** Keeps the thumb the right size and in the right position */\n    function updateThumb() {\n      if (contentEl && thumbEl && wrapperEl) {\n        // Update our cached values:\n        totalHeight = contentEl.scrollHeight;\n        visibleHeight = contentEl.clientHeight;\n        scrollPos = contentEl.scrollTop;\n        // Update calculated values:\n        scrollPosRatio = scrollPos / totalHeight;\n        visibleToTotalRatio = visibleHeight / totalHeight;\n\n        if (visibleToTotalRatio >= 1) {\n          // We're at 100% visible area, no need to show the scroll thumb:\n          thumbEl.style.height = '0px';\n        } else {\n          // Set the thumb top to the scroll percent:\n          thumbEl.style.top = scrollPosRatio * 100 + '%';\n          // Set the thumb size based on the scroll ratio:\n          thumbEl.style.height = Math.max(visibleToTotalRatio * 100, 10) + '%';\n        }\n      }\n\n      // Keep the updates coming:\n      frameUpdateRef.current = requestAnimationFrame(updateThumb);\n    }\n\n    /** Caches a starting mouse position, wires up listeners for drag */\n    function onDragStart(e: MouseEvent) {\n      if (contentEl && thumbEl && wrapperEl) {\n        // Prevent default text selection\n        e.preventDefault();\n        // Grab the starting mouse pos:\n        lastDragPos.current = { x: e.clientX, y: e.clientY };\n        // Add the dragging class to keep the thumb visible\n        wrapperEl.classList.add('workos-is-dragging');\n        // Add event listeners for drag and end:\n        window.addEventListener('mousemove', onDragMove);\n        window.addEventListener('mouseup', onDragEnd);\n        // Remember current body style so overrides can be restored later\n        originalBodyPointerEvents.current = document.body.style.pointerEvents;\n        // Disable pointer events so element hovers aren't visible while dragging\n        document.body.style.pointerEvents = 'none';\n      }\n    }\n\n    /** Calculates the mouse move to scroll amount and applies it */\n    function onDragMove(e: MouseEvent) {\n      if (contentEl && thumbEl && wrapperEl) {\n        // How much did we move?\n        const delta: Vector = {\n          dx: lastDragPos.current.x - e.clientX,\n          dy: lastDragPos.current.y - e.clientY,\n        };\n        // Cache the new mouse position:\n        lastDragPos.current = { x: e.clientX, y: e.clientY };\n\n        // Update the scroll position of the content, amplifying the mouse movement by the amount of content hidden:\n        contentEl.scrollTop -= Math.round(delta.dy / visibleToTotalRatio);\n      }\n    }\n\n    /** Unwires the mouse listeners and pops the dragging class off the wrapper */\n    function onDragEnd(e: MouseEvent) {\n      if (contentEl && thumbEl && wrapperEl) {\n        // Add the dragging class to keep the thumb visible\n        wrapperEl.classList.remove('workos-is-dragging');\n        // Get rid of our drag move and end event listeners:\n        window.removeEventListener('mousemove', onDragMove);\n        window.removeEventListener('mouseup', onDragEnd);\n        // Restore body pointer events style\n        document.body.style.pointerEvents = originalBodyPointerEvents.current;\n      }\n    }\n\n    // Listen for mousedown on the thumb:\n    thumbRef.current?.addEventListener('mousedown', onDragStart);\n\n    // Start updates every frame:\n    frameUpdateRef.current = requestAnimationFrame(updateThumb);\n\n    // Cancel the requestAnimationFrame and unbind potential listeners before leaving\n    return () => {\n      cancelAnimationFrame(frameUpdateRef.current);\n      thumbEl?.removeEventListener('mousedown', onDragStart);\n      window.removeEventListener('mousemove', onDragMove);\n      window.removeEventListener('mouseup', onDragEnd);\n    };\n  }, []);\n\n  return (\n    <Flex\n      ref={wrapperRef}\n      css={{\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        minHeight: 0,\n        maxHeight: '100%',\n        position: 'relative',\n        // This bit shows the thumb when you hover the wrapper\n        '&:hover': {\n          '& [data-scroll-thumb]': {\n            opacity: 1,\n          },\n        },\n        '&.workos-is-dragging': {\n          // Need to keep pointer events when scrolling so thumb isn't hidden immediately after scroll\n          pointerEvents: 'auto',\n          // But still remove pointer events from content\n          '& [data-scroll-content]': {\n            pointerEvents: 'none',\n          },\n          // Need to always keep the thumb visible when scrolling, even if the mouse leaves the wrapper\n          '& [data-scroll-thumb]': {\n            opacity: 1,\n          },\n        },\n      }}\n    >\n      {/* Lock the content into its own zIndex */}\n      <Box\n        data-scroll-content\n        ref={contentRef}\n        css={{\n          position: 'relative',\n          overflow: 'scroll',\n          scrollbarWidth: 'none',\n          zIndex: 1,\n          WebkitOverflowScrolling: 'touch',\n          '&::-webkit-scrollbar': { display: 'none' },\n        }}\n      >\n        {props.children}\n      </Box>\n      {/* Create the thumb on a higher zIndex */}\n      <Box\n        ref={thumbRef}\n        data-scroll-thumb\n        css={{\n          opacity: 0,\n          zIndex: 2,\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '8px',\n          // Fill in the thumb color\n          '&::after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '2px',\n            left: '2px',\n            width: 'calc(100% - 4px)',\n            height: 'calc(100% - 4px)',\n            // Match Radix hue on grays\n            backgroundColor: 'hsla(212, 5%, 50%, 0.3)',\n            borderRadius: '9999px',\n          },\n        }}\n      />\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}